{
  "version": 4,
  "terraform_version": "0.12.26",
  "serial": 33,
  "lineage": "87df11d2-916b-1f1a-d178-9326d6f3f09e",
  "outputs": {
    "docker_dns": {
      "value": "ec2-3-8-144-119.eu-west-2.compute.amazonaws.com",
      "type": "string"
    },
    "ebs_volume": {
      "value": "/dev/xvdh",
      "type": "string"
    },
    "public_dns": {
      "value": "ec2-3-9-169-236.eu-west-2.compute.amazonaws.com",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "template_file",
      "name": "docker",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "674c3d9207972270293fffbd9be8b9bebc3789bbdabd76ec21834ffbc6269677",
            "rendered": "#!/bin/bash -ex\n\nsudo bash -c \"echo writing to docker instance \u003e\u003e /home/ec2-user/log.txt\"\nsudo yum install -y docker\nsudo bash -c \"echo writing to docker instance end \u003e\u003e /home/ec2-user/log.txt\"\nsudo  sed -i -e s/OPTIONS=.*/OPTIONS='\\\"--selinux-enabled --log-driver=journald  -H unix:\\/\\/\\/var\\/run\\/docker.sock  -H tcp:\\/\\/0.0.0.0:2375\\\"/' /etc/sysconfig/docker\nsudo bash -c \"echo Making docker file end \u003e\u003e /home/ec2-user/log.txt\"\nsudo systemctl restart docker\n",
            "template": "#!/bin/bash -ex\n\nsudo bash -c \"echo writing to docker instance \u003e\u003e /home/ec2-user/log.txt\"\nsudo yum install -y docker\nsudo bash -c \"echo writing to docker instance end \u003e\u003e /home/ec2-user/log.txt\"\nsudo  sed -i -e s/OPTIONS=.*/OPTIONS='\\\"--selinux-enabled --log-driver=journald  -H unix:\\/\\/\\/var\\/run\\/docker.sock  -H tcp:\\/\\/0.0.0.0:2375\\\"/' /etc/sysconfig/docker\nsudo bash -c \"echo Making docker file end \u003e\u003e /home/ec2-user/log.txt\"\nsudo systemctl restart docker\n",
            "vars": null
          }
        }
      ]
    },
    {
      "mode": "data",
      "type": "template_file",
      "name": "init",
      "provider": "provider.template",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "ac1957f3d941ed7bb3aabb1935f7dd74eaa235f41eb2e417b170c594ad16d071",
            "rendered": "#!/bin/bash -ex\n\n\nsudo bash -c \"echo wrtiting to fstab \u003e\u003e /home/ec2-user/log.txt\"\nsudo mkdir -p /var/lib/jenkins\ndiskname=$(sudo fdisk -l | grep Disk |  grep 32 | awk '{print $2}' | sed -E 's/://')\nsudo bash -c \"echo Writing to the log file \u003e\u003e /home/ec2-user/log.txt\"\nsudo bash -c \"echo 'Got disk name' \u003e\u003e /home/ec2-user/log.txt\"\nsudo bash -c \"echo $diskname  /var/lib/jenkins          ext4   defaults  0  0 \u003e\u003e /etc/fstab\"\nsudo bash -c \"echo 'made an entry in fstab' \u003e\u003e /home/ec2-user/log.txt\"\nsudo mkfs.ext4 $diskname\nsudo bash -c \"echo 'created the file system' \u003e\u003e /home/ec2-user/log.txt\"\nsudo mount -a\nsudo bash -c \"echo 'Mounted the file system' \u003e\u003e /home/ec2-user/log.txt\"\n# Installing Jenkins\nsudo yum install -y java-1.8.0-openjdk\nsudo yum install -y git\nsudo bash -c \"echo 'Installed git and java' \u003e\u003e /home/ec2-user/log.txt\"\nsudo bash -c \"wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\"\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo bash -c \"echo Jenkins repo configured \u003e\u003e /home/ec2-user/log.txt\"\nsudo yum install -y jenkins\nsudo bash -c \"echo Jenkiins install complete mounted \u003e\u003e /home/ec2-user/log.txt\"\nsudo mkdir -p /var/lib/jenkins/init.groovy.d/\nsudo sed -i -e 's/JENKINS_JAVA_OPTIONS=\"-Djava.awt.headless=true\"/JENKINS_JAVA_OPTIONS=\"-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false\"/' /etc/sysconfig/jenkins\nsudo bash -c \"echo Jenkins customized \u003e\u003e /home/ec2-user/log.txt\"\n\nsudo bash -c 'cat \u003e /var/lib/jenkins/init.groovy.d/initialize.groovy \u003c\u003c EOF\n// 17:58\n\nimport jenkins.model.*\nimport hudson.security.*\nimport jenkins.security.s2m.AdminWhitelistRule\nimport hudson.security.csrf.DefaultCrumbIssuer\nimport jenkins.model.Jenkins\nimport java.util.logging.Logger\n\n\ndef jenkinsInstance = Jenkins.getInstance()\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\nhudsonRealm.createAccount(\"admin\", \"admin\")\njenkinsInstance.setSecurityRealm(hudsonRealm)\n\ndef loggedinAuthStrategy = new FullControlOnceLoggedInAuthorizationStrategy()\nloggedinAuthStrategy.setAllowAnonymousRead(false)\njenkinsInstance.setAuthorizationStrategy(loggedinAuthStrategy)\njenkinsInstance.save()\n\nJenkins.instance.getInjector().getInstance(AdminWhitelistRule.class)\ndef j = Jenkins.instance\nif (j.getCrumbIssuer() == null) {\n    j.setCrumbIssuer(new DefaultCrumbIssuer())\n    j.save()\n    prinln(\"CSRF Protection configuration has changed. Enabled CSRF Protection.\")\n} else {\n    println(\"Nothing Changed. CSRF Protection already configured\")\n}\n\ndef pluginlist =\n        \"ws-cleanup timestamper credentials-binding build-timeout antisamy-markup-formatter\".plus(\n                \"cloudbees-folder pipeline-stage-view pipeline-github-lib github-branch-source \"\n        ).plus(\"workflow-aggregator gradle ant mailer email-ext ldap pam-auth matrix-auth \")\nprintln(pluginlist)\ndef instance = Jenkins.getInstance()\ndef pm = instance.getPluginManager()\ndef uc = instance.getUpdateCenter()\n\n\n\npluginlist.split().each {\n    if (!pm.getPlugin(it)) {\n        if (!isInitialized) {\n            // uc.updateAllSites()\n            isInitialized = true\n        }\n    }\n    def plugin = uc.getPlugin(it)\n    if (plugin) {\n        def installFuture = plugin.deploy()\n        while (!installFuture.isDone()) {\n            sleep(1000)\n        }\n        isInstalled =true\n    }\n}\n\nif (isInstalled) {\n    instance.save()\n    instance.restart()\n}\nEOF'\n\n\nsleep 10\nsudo systemctl start jenkins\n\n\n\n\n",
            "template": "#!/bin/bash -ex\n\n\nsudo bash -c \"echo wrtiting to fstab \u003e\u003e /home/ec2-user/log.txt\"\nsudo mkdir -p /var/lib/jenkins\ndiskname=$(sudo fdisk -l | grep Disk |  grep ${volsize} | awk '{print $2}' | sed -E 's/://')\nsudo bash -c \"echo Writing to the log file \u003e\u003e /home/ec2-user/log.txt\"\nsudo bash -c \"echo 'Got disk name' \u003e\u003e /home/ec2-user/log.txt\"\nsudo bash -c \"echo $diskname  /var/lib/jenkins          ext4   defaults  0  0 \u003e\u003e /etc/fstab\"\nsudo bash -c \"echo 'made an entry in fstab' \u003e\u003e /home/ec2-user/log.txt\"\nsudo mkfs.ext4 $diskname\nsudo bash -c \"echo 'created the file system' \u003e\u003e /home/ec2-user/log.txt\"\nsudo mount -a\nsudo bash -c \"echo 'Mounted the file system' \u003e\u003e /home/ec2-user/log.txt\"\n# Installing Jenkins\nsudo yum install -y java-1.8.0-openjdk\nsudo yum install -y git\nsudo bash -c \"echo 'Installed git and java' \u003e\u003e /home/ec2-user/log.txt\"\nsudo bash -c \"wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\"\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key\nsudo bash -c \"echo Jenkins repo configured \u003e\u003e /home/ec2-user/log.txt\"\nsudo yum install -y jenkins\nsudo bash -c \"echo Jenkiins install complete mounted \u003e\u003e /home/ec2-user/log.txt\"\nsudo mkdir -p /var/lib/jenkins/init.groovy.d/\nsudo sed -i -e 's/JENKINS_JAVA_OPTIONS=\"-Djava.awt.headless=true\"/JENKINS_JAVA_OPTIONS=\"-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false\"/' /etc/sysconfig/jenkins\nsudo bash -c \"echo Jenkins customized \u003e\u003e /home/ec2-user/log.txt\"\n\nsudo bash -c 'cat \u003e /var/lib/jenkins/init.groovy.d/initialize.groovy \u003c\u003c EOF\n// 17:58\n\nimport jenkins.model.*\nimport hudson.security.*\nimport jenkins.security.s2m.AdminWhitelistRule\nimport hudson.security.csrf.DefaultCrumbIssuer\nimport jenkins.model.Jenkins\nimport java.util.logging.Logger\n\n\ndef jenkinsInstance = Jenkins.getInstance()\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\nhudsonRealm.createAccount(\"admin\", \"admin\")\njenkinsInstance.setSecurityRealm(hudsonRealm)\n\ndef loggedinAuthStrategy = new FullControlOnceLoggedInAuthorizationStrategy()\nloggedinAuthStrategy.setAllowAnonymousRead(false)\njenkinsInstance.setAuthorizationStrategy(loggedinAuthStrategy)\njenkinsInstance.save()\n\nJenkins.instance.getInjector().getInstance(AdminWhitelistRule.class)\ndef j = Jenkins.instance\nif (j.getCrumbIssuer() == null) {\n    j.setCrumbIssuer(new DefaultCrumbIssuer())\n    j.save()\n    prinln(\"CSRF Protection configuration has changed. Enabled CSRF Protection.\")\n} else {\n    println(\"Nothing Changed. CSRF Protection already configured\")\n}\n\ndef pluginlist =\n        \"ws-cleanup timestamper credentials-binding build-timeout antisamy-markup-formatter\".plus(\n                \"cloudbees-folder pipeline-stage-view pipeline-github-lib github-branch-source \"\n        ).plus(\"workflow-aggregator gradle ant mailer email-ext ldap pam-auth matrix-auth \")\nprintln(pluginlist)\ndef instance = Jenkins.getInstance()\ndef pm = instance.getPluginManager()\ndef uc = instance.getUpdateCenter()\n\n\n\npluginlist.split().each {\n    if (!pm.getPlugin(it)) {\n        if (!isInitialized) {\n            // uc.updateAllSites()\n            isInitialized = true\n        }\n    }\n    def plugin = uc.getPlugin(it)\n    if (plugin) {\n        def installFuture = plugin.deploy()\n        while (!installFuture.isDone()) {\n            sleep(1000)\n        }\n        isInstalled =true\n    }\n}\n\nif (isInstalled) {\n    instance.save()\n    instance.restart()\n}\nEOF'\n\n\nsleep 10\nsudo systemctl start jenkins\n\n\n\n\n",
            "vars": {
              "force_detach": "true",
              "volsize": "32"
            }
          }
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_ebs_volume",
      "name": "jenkins-volume",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:162855553133:volume/vol-033067889358a4964",
            "availability_zone": "eu-west-2a",
            "encrypted": false,
            "id": "vol-033067889358a4964",
            "iops": 100,
            "kms_key_id": "",
            "multi_attach_enabled": false,
            "outpost_arn": "",
            "size": 32,
            "snapshot_id": "",
            "tags": {
              "Name": "jenkins-volume"
            },
            "type": "gp2"
          },
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "docker",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-032598fcc7e9d1c7a",
            "arn": "arn:aws:ec2:eu-west-2:162855553133:instance/i-0650f87fb5d2c7c2b",
            "associate_public_ip_address": true,
            "availability_zone": "eu-west-2a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [],
            "ebs_optimized": false,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0650f87fb5d2c7c2b",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "awsinaction",
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-066518b217a8c0f4c",
            "private_dns": "ip-172-31-20-222.eu-west-2.compute.internal",
            "private_ip": "172.31.20.222",
            "public_dns": "ec2-3-8-144-119.eu-west-2.compute.amazonaws.com",
            "public_ip": "3.8.144.119",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "volume_id": "vol-00952af6f1e074901",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [
              "allow_docker"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-7d4af107",
            "tags": {
              "Name": "docker-instance"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "090cf0c81c08da394a8c628527bcfff237509c9a",
            "user_data_base64": null,
            "volume_tags": {},
            "vpc_security_group_ids": [
              "sg-0f2c90cbae4013f8a"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_security_group.allow_docker"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_instance",
      "name": "web",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "ami": "ami-032598fcc7e9d1c7a",
            "arn": "arn:aws:ec2:eu-west-2:162855553133:instance/i-0b8329eef69833f31",
            "associate_public_ip_address": true,
            "availability_zone": "eu-west-2a",
            "cpu_core_count": 1,
            "cpu_threads_per_core": 1,
            "credit_specification": [
              {
                "cpu_credits": "standard"
              }
            ],
            "disable_api_termination": false,
            "ebs_block_device": [
              {
                "delete_on_termination": false,
                "device_name": "/dev/xvdh",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "snapshot_id": "",
                "volume_id": "vol-033067889358a4964",
                "volume_size": 32,
                "volume_type": "gp2"
              }
            ],
            "ebs_optimized": false,
            "ephemeral_block_device": [],
            "get_password_data": false,
            "hibernation": false,
            "host_id": null,
            "iam_instance_profile": "",
            "id": "i-0b8329eef69833f31",
            "instance_initiated_shutdown_behavior": null,
            "instance_state": "running",
            "instance_type": "t2.micro",
            "ipv6_address_count": 0,
            "ipv6_addresses": [],
            "key_name": "awsinaction",
            "metadata_options": [
              {
                "http_endpoint": "enabled",
                "http_put_response_hop_limit": 1,
                "http_tokens": "optional"
              }
            ],
            "monitoring": false,
            "network_interface": [],
            "network_interface_id": null,
            "outpost_arn": "",
            "password_data": "",
            "placement_group": "",
            "primary_network_interface_id": "eni-0eb91b76af8985551",
            "private_dns": "ip-172-31-26-239.eu-west-2.compute.internal",
            "private_ip": "172.31.26.239",
            "public_dns": "ec2-3-9-169-236.eu-west-2.compute.amazonaws.com",
            "public_ip": "3.9.169.236",
            "root_block_device": [
              {
                "delete_on_termination": true,
                "device_name": "/dev/xvda",
                "encrypted": false,
                "iops": 100,
                "kms_key_id": "",
                "volume_id": "vol-08a9f7225a4edcb89",
                "volume_size": 8,
                "volume_type": "gp2"
              }
            ],
            "security_groups": [
              "allow_tls"
            ],
            "source_dest_check": true,
            "subnet_id": "subnet-7d4af107",
            "tags": {
              "Name": "jenkins-instance"
            },
            "tenancy": "default",
            "timeouts": null,
            "user_data": "9732595306ee9f452fa2aa126283a64a2fcd6be4",
            "user_data_base64": null,
            "volume_tags": {
              "Name": "jenkins-volume"
            },
            "vpc_security_group_ids": [
              "sg-0abf596ae742e9508"
            ]
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6MTIwMDAwMDAwMDAwMCwidXBkYXRlIjo2MDAwMDAwMDAwMDB9LCJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "aws_ebs_volume.jenkins-volume",
            "aws_security_group.allow_tls"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "allow_docker",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:162855553133:security-group/sg-0f2c90cbae4013f8a",
            "description": "Allow TLS inbound traffic",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0f2c90cbae4013f8a",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH from Docker",
                "from_port": 2375,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 2375
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH from Local machine",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              }
            ],
            "name": "allow_docker",
            "name_prefix": null,
            "owner_id": "162855553133",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "docker-sg"
            },
            "timeouts": null,
            "vpc_id": "vpc-07f2876f"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_security_group",
      "name": "allow_tls",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "arn": "arn:aws:ec2:eu-west-2:162855553133:security-group/sg-0abf596ae742e9508",
            "description": "Allow TLS inbound traffic",
            "egress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "",
                "from_port": 0,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "-1",
                "security_groups": [],
                "self": false,
                "to_port": 0
              }
            ],
            "id": "sg-0abf596ae742e9508",
            "ingress": [
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH from Docker",
                "from_port": 2375,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 2375
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH from VPC",
                "from_port": 22,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 22
              },
              {
                "cidr_blocks": [
                  "0.0.0.0/0"
                ],
                "description": "SSH from VPC",
                "from_port": 8080,
                "ipv6_cidr_blocks": [],
                "prefix_list_ids": [],
                "protocol": "tcp",
                "security_groups": [],
                "self": false,
                "to_port": 8080
              }
            ],
            "name": "allow_tls",
            "name_prefix": null,
            "owner_id": "162855553133",
            "revoke_rules_on_delete": false,
            "tags": {
              "Name": "jenkins-security"
            },
            "timeouts": null,
            "vpc_id": "vpc-07f2876f"
          },
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwfSwic2NoZW1hX3ZlcnNpb24iOiIxIn0="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "aws_volume_attachment",
      "name": "ebs_att",
      "provider": "provider.aws",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "device_name": "/dev/xvdh",
            "force_detach": null,
            "id": "vai-4239541415",
            "instance_id": "i-0b8329eef69833f31",
            "skip_destroy": true,
            "volume_id": "vol-033067889358a4964"
          },
          "private": "bnVsbA==",
          "dependencies": [
            "aws_ebs_volume.jenkins-volume",
            "aws_instance.web",
            "aws_security_group.allow_tls"
          ]
        }
      ]
    }
  ]
}
